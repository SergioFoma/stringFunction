#ifndef H_PAINT
#define H_PAINT

//-------------------------------------------------------------
//!
//! @note Перечисление, которое содержит код для каждого цвета.
//! PURPLE - фиолетовый.
//! YELLOW - желтый.
//! GREEN - зеленый.
//! BLUE - синий.
//! RED - красный.
//!
//------------------------------------------------------------
enum Colors {
    PURPLE    = 0,
    YELLOW    = 1,
    GREEN     = 2,
    BLUE      = 3,
    RED       = 4,
};

//-------------------------------------------------------------------
//!
//! @note Перечисление, которое содержит код для каждого стиля текста.
//! BOLD - жирный.
//! FADED - блеклый.
//! ITALICS - курсив.
//! UNDERLINED - подчеркунтый.
//! BLINKING - мигающий.
//! CROSSEDOUT - зачеркнутый.
//! NOMODE - стиль по умолчанию.
//!
//--------------------------------------------------------------------
enum Styles {
    BOLD        = 0,
    FADED       = 1,
    ITALICS     = 2,
    UNDERLINED  = 3,
    BLINKING    = 4,
    CROSSEDOUT  = 5,
    NOMODE      = 69,
};

#define makeBold "\033[1;"
#define makeFaded "\033[2;"
#define makeItalics "\033[3;"
#define makeUnderlined "\033[4;"
#define makeBlinking "\033[5;"
#define makeCrossedOut "\033[9;"

#define colorInPurple "35;40m"
#define colorInYellow "33;40m"
#define colorInGreen "32;40m"
#define colorInBlue "34;40m"
#define colorInRed "31;40m"
#define colorReset "\033[0m"

//--------------------------------------------------------------------------------------------------------
//!
//! @param[in] color    color - перечисление типа Colors, содержащее цвет, в который будет краситься текст.
//! @param[in] line     line - строка, которая будет печататься.
//! @param[in] ...      ... - необязательные параметры.
//!
//---------------------------------------------------------------------------------------------------------
void colorPrintf( Styles style, Colors color, const char* line ... );

//----------------------------------------------------------------------------------------------
//!
//! @param[in] color    color - перечисление типа Colors, которое содержит код каждого цвета.
//!
//! @return константную строку, являющуюся макрасом для покарски текста в цвет.
//!
//! @note сопоставляет каждому элементу стркутуры типа Colors соответсвующий макрос на покраску.
//!
//----------------------------------------------------------------------------------------------
const char* getColorString( Colors color );

//------------------------------------------------------------------------------------------------------
//!
//! @param[in] style    style -  перечисление типа Styles, которое содержит код для каждого стиля текста.
//!
//! @return константную строку, являющуюся макросом для стиля текста.
//!
//! @note спопоставляет каждому элементу стркутуры типа Styles соответсвующий макрос для стиля текста.
//!
//-------------------------------------------------------------------------------------------------------
const char* getStyleString( Styles style );

//-------------------------------------------------------------------------------------------------------
//!
//! @note Печатает подсказку по функционалу программы SquareSolver.
//!
//-------------------------------------------------------------------------------------------------------
void squareHelp();
#endif